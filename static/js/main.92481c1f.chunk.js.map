{"version":3,"sources":["Weather.js","Welcome.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","iconClass","location","updatedAt","weather","unitSystem","className","id","temp","description","type","name","onChange","toggle","defaultChecked","value","htmlFor","humidity","windSpeed","visibility","Welcome","message","App","React","useState","setLocation","setWeather","setUpdatedAt","setUnitSystem","errorMessage","setErrorMessage","useEffect","navigator","geolocation","getCurrentPosition","position","getWeather","lat","lon","API","fetch","then","response","json","data","sys","country","weatherData","main","Math","round","wind","speed","now","Date","getHours","desc","isNight","toLowerCase","getIconClass","today","dd","getDate","mm","getMonth","yyyy","getFullYear","h","m","getMinutes","meridiam","getCurrentDatetime","catch","error","coords","latitude","longitude","iconPath","event","target","checked","href","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.92481c1f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Weather.css';\r\n\r\nfunction Weather(props) {\r\n   const iconClass = props.iconClass;\r\n   const location = props.location;\r\n   const updatedAt = props.updatedAt;\r\n   const weather = props.weather;\r\n   const unitSystem = props.unitSystem;\r\n\r\n   return (\r\n      <div className=\"Weather vbox\">\r\n         <div id=\"weather-main\" className=\"hbox\">\r\n            <div id=\"weather-icon\" className={`blow-slow icon ${iconClass}`}></div>\r\n            <div className=\"hbox\">\r\n               <div className=\"vbox\">\r\n                  <span id=\"temp\">{weather.temp[unitSystem]}</span>\r\n                  <span id=\"desc\">{weather.description}</span>\r\n               </div>\r\n               <div id=\"unit-toggle\" className=\"vbox\">\r\n                  <input type=\"radio\" id=\"isu\" name=\"unit-syst\" onChange={props.toggle} defaultChecked value=\"isu\"/>\r\n                  <label htmlFor=\"isu\">&deg;C</label>\r\n                  <input type=\"radio\" id=\"uscs\" name=\"unit-syst\" onChange={props.toggle} value=\"uscs\"/>\r\n                  <label htmlFor=\"uscs\">&deg;F</label>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div id=\"location\">{location}</div>\r\n         <div id=\"datetime\">updated as of {updatedAt}</div>\r\n         <div id=\"weather-details\" className=\"hbox\">\r\n            <div className=\"vbox\">\r\n               <div className=\"icon medium-icon icons-water\"></div>\r\n               <div id=\"humidity\">{weather.humidity}</div>\r\n            </div>\r\n            <div className=\"vbox\">\r\n               <div className=\"icon medium-icon icons-wind\"></div>\r\n               <div id=\"wind\">{weather.windSpeed[unitSystem]}</div>\r\n            </div>\r\n            <div className=\"vbox\">\r\n               <div className=\"icon medium-icon icons-eye\"></div>\r\n               <div id=\"visibility\">{weather.visibility[unitSystem]}</div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './Welcome.css';\r\n\r\nfunction Welcome(props) {\r\n   return (\r\n      <div className=\"Welcome vbox\">\r\n         <h1>WeatherApp</h1>\r\n         <div className=\"stage\">\r\n            <div id=\"logo\" className=\"icon bounce\"></div>\r\n         </div>\r\n         {\r\n            props.message ? (\r\n               <p className=\"error\">{ props.message}</p>\r\n            ) : (\r\n               <p>Searching Location...</p>\r\n            )\r\n         }\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Welcome;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Weather from './Weather';\r\nimport Welcome from './Welcome';\r\n\r\nfunction App() {\r\n   const [location, setLocation] = React.useState();\r\n   const [weather, setWeather] = React.useState();\r\n   const [updatedAt, setUpdatedAt] = React.useState();\r\n   const [unitSystem, setUnitSystem] = React.useState(\"isu\");\r\n   const [errorMessage, setErrorMessage] = React.useState();\r\n\r\n   React.useEffect(getLocation, []);\r\n\r\n   function getLocation() {\r\n      if(navigator.geolocation) {\r\n         navigator.geolocation.getCurrentPosition((position) => {\r\n            const lat = position.coords.latitude;\r\n            const lon = position.coords.longitude;\r\n            getWeather(lat, lon);\r\n         }, () => {\r\n            setErrorMessage(\"Please, enable geolocation to use this app\");\r\n         });\r\n      } else {\r\n         setErrorMessage(\"Geolocation is not supported by this device\");\r\n      }\r\n   }\r\n\r\n   function getWeather(lat, lon) {\r\n      const API = `https://fcc-weather-api.glitch.me/api/current?lat=${lat}&lon=${lon}`;\r\n      fetch(API)\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            if (data.name === \"Shuzenji\") {\r\n               getWeather(lat, lon);\r\n               return;\r\n            }\r\n            // Set location\r\n            const location = `${data.name}, ${data.sys.country}`;\r\n            setLocation(location);\r\n            // Set weather information (in isus)\r\n            let weatherData = {};\r\n            weatherData[\"type\"] = data.weather[0].main;\r\n            weatherData[\"description\"] = data.weather[0].description;\r\n            weatherData[\"temp\"] = {\r\n               \"isu\": Math.round(data.main.temp*10)/10,\r\n               \"uscs\": Math.round((data.main.temp*9/5 + 32)*10)/10\r\n            };\r\n            weatherData[\"windSpeed\"] = {\r\n               \"isu\": Math.round(data.wind.speed*10)/10 + \"km/h\",\r\n               \"uscs\": Math.round(data.wind.speed/1.609*10)/10 + \"mph\"\r\n            }\r\n            weatherData[\"visibility\"] = {\r\n               \"isu\": Math.round(data.visibility*10)/10 + \"km\",\r\n               \"uscs\": Math.round(data.visibility/1.609*10)/10 + \"mi\"\r\n            }\r\n\r\n            weatherData[\"humidity\"] = Math.round(data.main.humidity*10)/10 + \"%\";\r\n\r\n            const now = (new Date()).getHours();\r\n            weatherData[\"iconPath\"] = getIconClass(data.weather[0].main, (now<=5 || now>=19));\r\n\r\n            setWeather(weatherData);\r\n\r\n            setUpdatedAt(getCurrentDatetime());\r\n         })\r\n         .catch((error) => {\r\n            setErrorMessage(\"Failed to get weather\");\r\n         });\r\n   }\r\n\r\n   function toggleUnitSystem(event) {\r\n      if(event.target.checked) {\r\n         setUnitSystem(event.target.value);\r\n      }\r\n   }\r\n\r\n   function getCurrentDatetime() {\r\n      const today = new Date();\r\n      let dd = today.getDate();\r\n      let mm = today.getMonth()+1;\r\n      let yyyy = today.getFullYear();\r\n      let h = today.getHours();\r\n      let m = today.getMinutes();\r\n      let meridiam = 'AM';\r\n\r\n      if(m < 10) {\r\n         m = '0'+m;\r\n      }\r\n      \r\n      if(h > 12) {\r\n         h = h%12;\r\n         meridiam = 'PM';\r\n      }\r\n\r\n      return `${mm}/${dd}/${yyyy} ${h}:${m} ${meridiam}`;\r\n   }\r\n\r\n   function getIconClass(desc, isNight) {\r\n      switch (desc.toLowerCase()) {\r\n         case \"clouds\":\r\n            if (isNight) return \"icons-night-cloudy\";\r\n            return \"icons-cloudy\";\r\n         case \"clear\":\r\n            if (isNight) return \"icons-night-clear\"\r\n            return \"icons-sunny\";\r\n         case \"rain\":\r\n            return \"icons-rainy-2\";\r\n         case \"snow\":\r\n            return \"icons-snowy\";\r\n         case \"thunderstorm\":\r\n            return \"icons-stormy\";\r\n         case \"drizzle\":\r\n            return \"icons-rainy\";\r\n         default:\r\n            return \"icons-cloudy-2\";\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div className=\"App\">\r\n         {\r\n            !location || !weather || errorMessage ? (\r\n               <Welcome message={ errorMessage } />\r\n            ) : (\r\n               <Weather location={ location }\r\n                        iconClass={ weather.iconPath } \r\n                        weather={ weather }\r\n                        unitSystem={ unitSystem }\r\n                        updatedAt={ updatedAt } \r\n                        toggle={ toggleUnitSystem }/>\r\n            )\r\n         }\r\n         <p id=\"author\">Coded by <a href=\"https://github.com/cdngouma\" target=\"blank_\">cdngouma</a>.</p>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}